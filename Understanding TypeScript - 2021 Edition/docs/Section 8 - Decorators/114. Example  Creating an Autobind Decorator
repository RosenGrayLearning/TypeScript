- as mentioned - method decorators allows us return a descriptor,
  which allows us to change the method or configuration of the method
- in the following example, we are solving the "this" problem, when he have no access to certain this, inside a method which 
  is bounded to another object (a different this);

  like so :
/**************************** First Example ****************************/

  class Printer {
    message = 'This Works!';

    showMessage(){
        console.log(this.message)
    }
}

const p = new Printer();
const button = document.querySelector('button')!;

 button.addEventListener('click',p.showMessage.bind(p))

/**************************** First Example ****************************/




/**************************** Autobind example ****************************/


function Autobind(_: any, _2: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;
  const adjDescriptor: PropertyDescriptor = {
    configurable: true,
    enumerable: false,
    get() {
      const boundFn = originalMethod.bind(this);
      return boundFn;
    }
  };
  return adjDescriptor;
}

class Printer {
  message = 'This works!';

  @Autobind
  showMessage() {
    console.log(this.message);
  }
}

const p = new Printer();
p.showMessage();

const button = document.querySelector('button')!;
button.addEventListener('click', p.showMessage);